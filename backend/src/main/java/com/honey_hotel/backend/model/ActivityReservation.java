package com.honey_hotel.backend.model;

import java.time.LocalDate;

import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;

/**
 Main Activity reservations class with functionalities
 @author Samuel Choi
 @version 1.0 (Oct 26 2024)
 */
@Entity
@Table(name = "activityreservations")
public class ActivityReservation {

    /**
     * Unique identifier of the activity automatically generated by the database
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The user who made the activity reservation
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    @JsonIgnore
    private AppUser user;

    /**
     * The activity being reserved
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "activity_id", nullable = false)
    private Activities activity;

    /**
     * The hotel reservation associated with the activity reservation
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "hotel_reservation_id", nullable = false)
    @JsonIgnore
    private Reservation reservation;

    /**
     * The date of the activity reservation
     */
    @Column(name = "reservation_date", nullable = false)
    private LocalDate reservationDate;

    // Getters and setters
    /**
     * Gets the unique identifier of the activity reservation
     *
     * @return activity reservation ID
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the activity reservation
     *
     * @param id activity reservation ID
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the user who made the activity reservation
     *
     * @return the user associated with the reservation
     */
    public AppUser getUser() {
        return user;
    }

    /**
     * Sets the user who made the activity reservation
     *
     * @param user the user to associate with the reservation
     */
    public void setUser(AppUser user) {
        this.user = user;
    }

    /**
     * Gets the activity being reserved
     *
     * @return the activity associated with the reservation
     */
    public Activities getActivity() {
        return activity;
    }

    /**
     * Sets the activity for the reservation
     *
     * @param activity the activity to associate with the reservation
     */
    public void setActivity(Activities activity) {
        this.activity = activity;
    }

    /**
     * Gets the hotel reservation associated with the activity reservation
     *
     * @return hotel reservation
     */
    public Reservation getReservation() {
        return reservation;
    }

    /**
     * Sets the hotel reservation for the activity reservation
     *
     * @param reservation hotel reservation
     */
    public void setReservation(Reservation reservation) {
        this.reservation = reservation;
    }

    /**
     * Gets the date of the activity reservation
     *
     * @return hotel reservation date
     */
    public LocalDate getReservationDate() {
        return reservationDate;
    }

    /**
     * Sets the date of the activity reservation
     *
     * @param reservationDate hotel reservation date
     */
    public void setReservationDate(LocalDate reservationDate) {
        this.reservationDate = reservationDate;
    }
}